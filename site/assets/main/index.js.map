{"version":3,"sources":["../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/ActionBomb.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/ActionPerformer.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/ActionRemoveBatchSameColor.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Action/ActionResult.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/AllowActionStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Binder.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/Board.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/BoardComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/BoardStats.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/Bonus/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/Bonus/BombBoosterComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/Bonus/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/Bonus/BonusComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Color/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Color/ColorPalette.ts","../file:/Applications/Cocos/Creator/3.8.0/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/tools/file:/Applications/Cocos/Creator/3.8.0/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/FillingStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/GameController/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/GameController/GameController.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/file:/Users/georgeananchenko/src/Blast/assets/scripts/GameSettings.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/IBoardLastChanged.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Color/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Color/IColorPalette.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/IfLostStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/IfWinStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/GameController/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/GameController/ISetState.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/file:/Users/georgeananchenko/src/Blast/assets/scripts/Main.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ObjectPool/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ObjectPool/ObjectPool.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/PlayButtonComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ObjectPool/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ObjectPool/PooledObject.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ProgressComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Scene/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Scene/SceneSwitcher.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ScoreComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/ShiftDownAndFillStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/ShuffleComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/ShuffleIfCantContinueStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/StageController.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Board/Tile.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/TileComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/View/file:/Users/georgeananchenko/src/Blast/assets/scripts/View/TurnsComponent.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/WaitForActionStage.ts","../file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/file:/Users/georgeananchenko/src/Blast/assets/scripts/Game/Stage/WaitForTimeStage.ts"],"names":["ActionBomb","radius","_radius","_proto","prototype","execute","board","x","y","console","log","tilesToRemove","getElementsInRadius","removeTiles","ActionResult","xStart","yStart","size","direction","chainSize","k","j","i","xMax","yMax","push","_RF","pop","ActionPerformer","boardStats","batchSizeForDefaultAction","_board","_boardStats","_defaultAction","_currentAction","_isActionAllowed","_observers","_actions","Map","ActionRemoveBatchSameColor","setDefaultAction","getCount","action","has","get","warn","addAction","amount","set","addObserver","observer","allowAction","isAllowed","setAction","performActionOnCellAt","executedCells","isExecuted","increaseScore","length","increaseTurn","decriseActionCount","notifyObservers","count","Math","max","forEach","notified","_createClass","key","canExecute","minCellsInBath","_minCellsInBath","tile","getTile","color","getTilesInRadiusWithColor","removeTilesInRadiusWithColor","tilesToRemoveArray","Array","from","Set","tilesToCheck","visited","tileToCheck","shift","equals","add","apply","getNeighbours","neighbours","_executedCells","_isExecuted","AllowActionStage","isAllow","boardActionAllower","_boardActionAllower","_isAllow","_isStarted","_isDone","reset","Binder","_bindings","getInstance","instance","resolve","type","addBinding","clear","Board","colorPalette","_tiles","_xMax","_yMax","_colorPalette","_lastChangedTiles","prepareAllTilesForNotify","TilesChange","Added","_this","tiles","map","_ref","index","codePositionToIndex","change","Removed","fill","Tile","getRandomColor","shiftDown","movedTiles","shiftsInRow","shiftRowDown","Moved","values","xPos","yPos","upIndex","upTile","currentTile","id","setPosition","shuffle","currentIndex","_this$_tiles$currentI","_this$_tiles$randomIn","randomIndex","floor","random","_ref2","decodeIndexToPosition","ccclass","_decorator","property","BoardComponent","_dec","_dec2","Prefab","_dec3","Node","_class","_class2","_Component","_inheritsLoose","_len","arguments","args","_key","call","concat","_initializerDefineProperty","_descriptor","_assertThisInitialized","_descriptor2","_contentTransform","_tileWidth","_tileHeight","_pool","onLoad","tilePrefab","Error","content","getComponent","UITransform","binder","ObjectPool","adjustSize","squareTileSize","math","bits","min","contentSize","width","height","Size","getComponents","Layout","layout","updateLayout","updateTiles","_this2","lastChanges","lastChangedTiles","tileModel","tileNode","pool","setTileComponent","borrow","position","transformGridToUiPosition","moveTo","getUiYPosition","node","parent","init","setTileSize","xPosition","yPosition","tileTransform","Component","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","BoardStats","maxTurns","targetScore","maxShuffleCount","_maxTurns","_currentTurns","_targetScore","_currentScore","_maxShuffleCount","_currentShuffleCount","removedTiles","increaseShuffle","BombBoosterComponent","CCString","CCInteger","_dec4","_dec5","BonusComponent","_descriptor3","_descriptor4","_action","_actionProvider","bonusComponent","setBoosterName","boosterName","setCount","setBooster","Button","Label","nameText","countText","name","string","toString","button","interactable","ColorPalette","colors","Color","WHITE","_colors","DebugViewRuntimeControl","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","BLACK","RED","GREEN","BLUE","start","canvas","Canvas","error","uiTransform","halfScreenWidth","halfScreenHeight","miscNode","getChildByName","buttonNode","instantiate","titleNode","newLabel","EnableAllCompositeModeButton","setScale","labelComponent","overflow","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","on","Toggle","EventType","TOGGLE","toggleSingleMode","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","toggleComponent","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","activeValue","active","update","deltaTime","FillingStage","boardFill","_boardFill","GameController","settings","_state","_settings","_actionPerformer","_sceneSwitcher","_stageController","GameState","None","setStateTo","state","Start","GameOver","Playing","switchScene","gameScreenName","startSequance","Paused","gameOverScreenName","isStarted","tileColors","boardMaxX","boardMaxY","groupSizeForDefaultAction","SceneSwitcher","loadingScreenName","StageController","onEndGameSequence","addStages","makeBindings","startStages","WaitForTimeStage","repeatingStages","IfWinStage","IfLostStage","ShuffleIfCantContinueStage","WaitForActionStage","ShiftDownAndFillStage","addStartStages","addRepeatingStages","GameSettings","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","endGameChecker","endGameSequence","_endGameChecker","_endGameSequence","isDone","ifLost","endSequance","winChecker","_winChecker","ifWin","Main","_gameController","addPersistRootNode","gameSettings","prefab","defaultPoolCount","componentName","pooledObjects","createNew","objectToBorrow","find","o","IsBorrowed","_return","object","objectToReturn","Equals","newPooledObject","PooledObject","PlayButtonComponent","_setState","setGameStateToPlay","defaultParent","isBorrowed","instancedNode","instancedComponent","component","ProgressComponent","ProgressBar","_stats","progress","currentScore","_loadingScreenName","sceneName","callback","loadLoadingScreen","loadScene","err","scene","ScoreComponent","score","boardShiftDown","_boardShiftDown","ShuffleComponent","shuffles","currentShuffleCount","time","canContinue","canShuffleAndIncrease","_canContinue","_shuffle","_canShuffleAndIncrease","_time","canDoDefaultAction","canShuffle","setTimeout","_currentStageIndex","_repeatingStages","_startStages","_endStages","_stageType","_sequenceEnded","StageType","currentStages","getStages","currentStage","increaseStageCounter","switchToNextStage","Repeating","End","stageType","stages","addEndStages","_idCounter","_id","_x","_y","_color","TileComponent","CCFloat","_model","_sprite","_performAction","sprite","Sprite","model","tween","to","destroyDuration","scale","Vec3","moveDuration","onTileClicked","TurnsComponent","turns","currentTurns","observerAdder","actionAllower","_observerAdder","_actionAllower","isActionAllowed"],"mappings":"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","file":"all.js","sourcesContent":["import { IBoard } from \"../Board/IBoard\";\nimport { ActionResult } from \"./ActionResult\";\nimport { IAction } from \"./IAction\";\nimport { IActionResult } from \"./IActionResult\";\n\nexport class ActionBomb implements IAction {\n    private readonly _radius: number;\n\n    constructor(radius: number) {\n        this._radius = radius;\n    }\n\n    execute(board: IBoard, x: number, y: number): IActionResult {\n        console.log(\"ActioBomb execute\", x, y);\n        const tilesToRemove = this.getElementsInRadius(board, x, y, this._radius);\n        board.removeTiles(tilesToRemove);\n        return new ActionResult(tilesToRemove);\n    }\n\n    private getElementsInRadius(board: IBoard, xStart: number, yStart: number, size: number): { x: number, y: number }[] {\n        let x = 0;\n        let y = 0;\n        let direction = 0; // 0=RIGHT, 1=DOWN, 2=LEFT, 3=UP\n        let chainSize = 1;\n\n        x = xStart;\n        y = yStart;\n        size = size + 1;\n        const tilesToRemove: { x: number, y: number }[] = [];\n\n        for (let k = 1; k <= size - 1; k++) {\n            for (let j = 0; j < (k < size - 1 ? 2 : 3); j++) {\n                for (let i = 0; i < chainSize; i++) {\n\n                    if (x >= 0 && x < board.xMax && y >= 0 && y < board.yMax) {\n                        tilesToRemove.push({ x: x, y: y });\n                    }\n\n                    switch (direction) {\n                        case 0:\n                            x++;\n                            break;\n                        case 1:\n                            y--;\n                            break;\n                        case 2:\n                            x--;\n                            break;\n                        case 3:\n                            y++;\n                            break;\n                    }\n                }\n                direction = (direction + 1) % 4;\n            }\n            chainSize = chainSize + 1;\n        }\n\n        if (x >= 0 && x < board.xMax && y >= 0 && y < board.yMax) {\n            tilesToRemove.push({ x: x, y: y });\n        }\n\n        return tilesToRemove;\n    }\n}","import { ActionRemoveBatchSameColor } from \"./ActionRemoveBatchSameColor\";\nimport { IAction } from \"./IAction\";\nimport { BoardStats } from \"../Board/BoardStats\";\nimport { IAddObserver } from \"../Board/IAddObserver\";\nimport { IAllowAction } from \"../Board/IAllowAction\";\nimport { IBoard } from \"../Board/IBoard\";\nimport { IIsActionAllowed } from \"../Board/IIsActionAllowed\";\nimport { IObserver } from \"../Board/IObserver\";\nimport { ICanDoDefaultAction } from \"../Board/ICanDoDefaultAction\";\nimport { IAddActionGetCount } from \"./IAddActionGetCount\";\n\nexport class ActionPerformer implements IAllowAction, IAddObserver, IIsActionAllowed, ICanDoDefaultAction, IAddActionGetCount {\n    private readonly _board: IBoard;\n    private readonly _boardStats: BoardStats;\n\n    private readonly _defaultAction: ActionRemoveBatchSameColor;\n    private _currentAction: IAction;\n    private _isActionAllowed: boolean;\n    private _observers: IObserver[] = [];\n    private _actions: Map<object, number> = new Map();\n\n    constructor(board: IBoard, boardStats: BoardStats, batchSizeForDefaultAction: number) {\n        this._board = board;\n        this._boardStats = boardStats;\n        this._defaultAction = new ActionRemoveBatchSameColor(batchSizeForDefaultAction);\n        this.setDefaultAction();\n    }\n\n    getCount(action: IAction): number {\n        if (this._actions.has(action)) {\n            return this._actions.get(action)!;\n        }\n\n        console.warn(\"ActionPerformer getCount\", action, \"not found in \", this._actions);\n        return 0;\n    }\n\n    addAction(action: IAction, amount: number): void {\n        this._actions.set(action, amount);\n    }\n\n    get canDoDefaultAction(): boolean {\n        for (let y = 0; y < this._board.yMax; y++) {\n            for (let x = 0; x < this._board.xMax; x++) {\n                if (this._defaultAction.canExecute(this._board, x, y)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    get isActionAllowed(): boolean {\n        return this._isActionAllowed;\n    }\n\n    addObserver(observer: IObserver): void {\n        this._observers.push(observer);\n    }\n\n    allowAction(isAllowed: boolean): void {\n        this._isActionAllowed = isAllowed;\n    }\n\n    setAction(action: IAction): void {\n        console.log(\"ActionPerformer setAction\", action);\n        this._currentAction = action;\n    }\n\n    performActionOnCellAt(x: number, y: number): void {\n        console.log(\"ActionPerformer performActionOnCellAt\", x, y);\n        if (!this._isActionAllowed) {\n            return;\n        }\n\n        let executedCells = this._currentAction.execute(this._board, x, y);\n        if (executedCells.isExecuted) {\n            this._boardStats.increaseScore(executedCells.executedCells.length);\n            this._boardStats.increaseTurn();\n\n            // reaction on action\n            console.log(\"executedCells\", executedCells.executedCells);\n            this.decriseActionCount();\n            this.setDefaultAction();\n            this.notifyObservers();\n        }\n        else {\n            // reaction on no action\n            console.log(\"no action\");\n        }\n    }\n\n    private decriseActionCount(): void {\n        console.log(\"ActionPerformer decriseActionCount\", this._currentAction);\n        if (this._actions.has(this._currentAction)) {\n            const count = this._actions.get(this._currentAction);\n            this._actions.set(this._currentAction, Math.max(count - 1, 0));\n        }\n    }\n\n    private setDefaultAction(): void {\n        this._currentAction = this._defaultAction;\n    }\n\n    private notifyObservers(): void {\n        this._observers.forEach(observer => {\n            observer.notified();\n        });\n    }\n}","import { Color } from \"cc\";\nimport { IBoard } from \"../Board/IBoard\";\nimport { IAction } from \"./IAction\";\nimport { IActionResult } from \"./IActionResult\";\nimport { ActionResult } from \"./ActionResult\";\n\nexport class ActionRemoveBatchSameColor implements IAction {\n    private readonly _minCellsInBath: number;\n\n    constructor(minCellsInBath: number) {\n        this._minCellsInBath = minCellsInBath;\n    }\n\n    canExecute(board: IBoard, x: number, y: number): boolean {\n        console.log(\"ActionRemoveBatchSameColor canExecute\");\n        const tile = board.getTile(x, y);\n        if (!tile) {\n            return false;\n        }\n        const color = tile.color;\n        const tilesToRemove = this.getTilesInRadiusWithColor(board, x, y, color);\n        if (tilesToRemove.size >= this._minCellsInBath) {\n            return true;\n        }\n        return false;\n    }\n\n    execute(board: IBoard, x: number, y: number): IActionResult {\n        console.log(\"ActionRemoveBatchSameColor execute\");\n        return this.removeTilesInRadiusWithColor(board, x, y);\n    }\n\n    private removeTilesInRadiusWithColor(board: IBoard, x: number, y: number): IActionResult {\n        const color = board.getTile(x, y).color;\n        const tilesToRemove = this.getTilesInRadiusWithColor(board, x, y, color);\n\n        if (tilesToRemove.size >= this._minCellsInBath) {\n            const tilesToRemoveArray = Array.from(tilesToRemove);\n            board.removeTiles(tilesToRemoveArray);\n            return new ActionResult(tilesToRemoveArray);\n        }\n\n        return new ActionResult();\n    }\n\n    private getTilesInRadiusWithColor(board: IBoard, x: number, y: number, color: Color): Set<{ x: number, y: number }> {\n        const tilesToRemove = new Set<{ x: number, y: number }>;\n        const tilesToCheck = [{ x: x, y: y }];\n        const visited = new Set<string>();\n\n        while (tilesToCheck.length > 0) {\n            const tileToCheck = tilesToCheck.shift();\n            const key = `${tileToCheck.x},${tileToCheck.y}`;\n\n            if (!visited.has(key)) {\n                const tile = board.getTile(tileToCheck.x, tileToCheck.y)\n                if (tile && tile.color.equals(color)) {\n                    visited.add(key);\n                    tilesToRemove.add(tileToCheck);\n                    tilesToCheck.push(...this.getNeighbours(board, tileToCheck.x, tileToCheck.y));\n                }\n            }\n        }\n\n        return tilesToRemove;\n    }\n\n    private getNeighbours(board: IBoard, x: number, y: number): { x: number, y: number }[] {\n        let neighbours: { x: number, y: number }[] = [];\n\n        if (x > 0) {\n            neighbours.push({ x: x - 1, y: y });\n        }\n        if (x < board.xMax - 1) {\n            neighbours.push({ x: x + 1, y: y });\n        }\n        if (y > 0) {\n            neighbours.push({ x: x, y: y - 1 });\n        }\n        if (y < board.yMax - 1) {\n            neighbours.push({ x: x, y: y + 1 });\n        }\n\n        return neighbours;\n    }\n}","import { IActionResult } from \"./IActionResult\";\n\nexport class ActionResult implements IActionResult {\n    private readonly _executedCells: { x: number, y: number }[];\n    private readonly _isExecuted: boolean;\n\n    constructor(executedCells: { x: number, y: number }[] = []) {\n        this._executedCells = executedCells;\n        this._isExecuted = executedCells.length > 0;\n    }\n\n    public get executedCells(): { x: number, y: number }[] {\n        return this._executedCells;\n    }\n\n    public get isExecuted(): boolean {\n        return this._isExecuted;\n    }\n}","import { IAllowAction } from \"../Board/IAllowAction\";\nimport { IStage } from \"./IStage\";\n\nexport class AllowActionStage implements IStage {\n    private readonly _boardActionAllower: IAllowAction;\n    private readonly _isAllow: boolean;\n    private _isStarted: boolean = false;\n    private _isDone: boolean = false;\n\n    constructor(isAllow: boolean, boardActionAllower: IAllowAction) {\n        this._isAllow = isAllow;\n        this._boardActionAllower = boardActionAllower;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        this._isStarted = true;\n        console.log(\"AllowActionStage execute\");\n        this._boardActionAllower.allowAction(this._isAllow);\n        this._isDone = true;\n    }\n}","\n// TODO: dont know yet how to bind model and view in CocosCreator better than this\nexport class Binder {\n    private static instance: Binder;\n    private _bindings: Map<string, any> = new Map<string, any>();\n\n    private constructor() { }\n\n    public static getInstance(): Binder {\n        if (!Binder.instance) {\n            Binder.instance = new Binder();\n        }\n\n        return Binder.instance;\n    }\n\n    public resolve<T>(type: string): T {\n        return Binder.instance._bindings.get(type);\n    }\n\n    public addBinding<T>(type: string, instance: T): void {\n        if (this._bindings.has(type)) {\n            return;\n        }\n\n        this._bindings.set(type, instance);\n    }\n\n    clear() {\n        this._bindings.clear();\n    }\n}","import { IColorPalette } from \"../Color/IColorPalette\";\nimport { IBoard } from \"./IBoard\";\nimport { IShuffle } from \"./IShuffle\";\nimport { ITile } from \"./ITile\";\nimport { Tile } from \"./Tile\";\nimport { IBoardDataAndAddNotifier } from \"./IBoardDataAndAddNotifier\";\nimport { IObserver } from \"./IObserver\";\nimport { IReadTile } from \"./IReadTile\";\nimport { TilesChange } from \"./IBoardLastChanged\";\nimport { IFillBoard } from \"./IFillBoard\";\nimport { IShiftDownBoard } from \"./IShiftDownBoard\";\n\nexport class Board implements IBoard, IBoardDataAndAddNotifier, IShuffle, IShiftDownBoard, IFillBoard {\n    private readonly _tiles: ITile[];\n    private readonly _xMax: number;\n    private readonly _yMax: number;\n    private readonly _colorPalette: IColorPalette;\n    private readonly _observers: IObserver[];\n    private _lastChangedTiles: { change: TilesChange, tiles: IReadTile[] } = null;\n\n    constructor(xMax: number, yMax: number, colorPalette: IColorPalette) {\n        this._xMax = xMax;\n        this._yMax = yMax;\n        this._colorPalette = colorPalette;\n        this._tiles = new Array(xMax * yMax);\n        this._observers = [];\n    }\n\n    get xMax(): number {\n        return this._xMax;\n    }\n\n    get yMax(): number {\n        return this._yMax;\n    }\n\n    get lastChangedTiles(): { change: TilesChange, tiles: IReadTile[] } {\n        return this._lastChangedTiles;\n    }\n\n    addObserver(observer: IObserver): void {\n        this._observers.push(observer);\n        this._lastChangedTiles = this.prepareAllTilesForNotify(TilesChange.Added);\n        observer.notified();\n    }\n\n    getTile(x: number, y: number): ITile {\n        return this._tiles[x + y * this._xMax];\n    }\n\n    removeTiles(tilesToRemove: { x: number, y: number }[]): void {\n        console.log(\"Board removeTile\");\n        const tiles: IReadTile[] = tilesToRemove.map(({ x, y }) => {\n            const index = this.codePositionToIndex(x, y);\n            const tile = this._tiles[index];\n            this._tiles[index] = null;\n            return tile;\n        });\n\n        this._lastChangedTiles = { change: TilesChange.Removed, tiles: tiles };\n        this.notifyObservers();\n    }\n\n    fill(): void {\n        console.log(\"Board fill\");\n        const tiles: IReadTile[] = [];\n        for (let y = 0; y < this._yMax; y++) {\n            for (let x = 0; x < this._xMax; x++) {\n                const index = this.codePositionToIndex(x, y);\n                if (!this._tiles[index]) {\n                    const tile = new Tile(x, y, this._colorPalette.getRandomColor());\n                    this._tiles[index] = tile;\n                    tiles.push(tile);\n                }\n            }\n        }\n\n        this._lastChangedTiles = { change: TilesChange.Added, tiles: tiles };\n        this.notifyObservers();\n    }\n\n    shiftDown(): void {\n        console.log(\"Board shiftDown\");\n        const movedTiles = new Map<number, ITile>();\n        for (let x = 0; x < this._xMax; x++) {\n            let shiftsInRow = 0;\n            for (let y = 0; y < this._yMax; y++) {\n                const index = this.codePositionToIndex(x, y);\n                while (this._tiles[index] === null && shiftsInRow + y < this._yMax) {\n                    this.shiftRowDown(x, y, movedTiles);\n                    shiftsInRow++;\n                }\n            }\n        }\n\n        this._lastChangedTiles = { change: TilesChange.Moved, tiles: Array.from(movedTiles.values()) };\n        this.notifyObservers();\n    }\n\n    shiftRowDown(xPos: number, yPos: number, movedTiles: Map<number, ITile>): void {\n        for (let y = yPos; y < this._yMax - 1; y++) {\n            const index = this.codePositionToIndex(xPos, y);\n\n            const upIndex = this.codePositionToIndex(xPos, y + 1);\n            const upTile = this._tiles[upIndex];\n            const currentTile = this._tiles[index];\n            this._tiles[upIndex] = currentTile;\n            this._tiles[index] = upTile;\n            if (upTile) {\n                movedTiles.set(upTile.id, upTile);\n                upTile.setPosition({ x: xPos, y: y });\n            }\n        }\n    }\n\n    shuffle(): void {\n        console.log(\"Board shuffle\");\n        let currentIndex = this._tiles.length;\n\n        while (currentIndex != 0) {\n            const randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this._tiles[currentIndex], this._tiles[randomIndex]] =\n                [this._tiles[randomIndex], this._tiles[currentIndex]];\n\n            this._tiles[currentIndex]?.setPosition(this.decodeIndexToPosition(currentIndex));\n            this._tiles[randomIndex]?.setPosition(this.decodeIndexToPosition(randomIndex));\n        }\n\n        this._lastChangedTiles = this.prepareAllTilesForNotify(TilesChange.Moved);\n        this.notifyObservers();\n    };\n\n    private notifyObservers(): void {\n        this._observers.map(observer => observer.notified());\n    }\n\n    private codePositionToIndex(x: number, y: number): number {\n        return x + y * this._xMax;\n    }\n\n    private decodeIndexToPosition(index: number): { x: number, y: number } {\n        return { x: index % this._xMax, y: Math.floor(index / this._xMax) };\n    }\n\n    private prepareAllTilesForNotify(change: TilesChange): { change: TilesChange, tiles: IReadTile[] } {\n        const tiles = this._tiles.map(tile => tile);\n        return { change: change, tiles: tiles };\n    }\n}","import { _decorator, Component, Layout, math, Node, Prefab, UITransform } from 'cc';\nimport { TileComponent } from './TileComponent';\nimport { Binder } from '../Game/Binder';\nimport { IBoardDataAndAddNotifier } from '../Game/Board/IBoardDataAndAddNotifier';\nimport { IObserver } from '../Game/Board/IObserver';\nimport { TilesChange } from '../Game/Board/IBoardLastChanged';\nimport { IReadTile } from '../Game/Board/IReadTile';\nimport { ObjectPool } from './ObjectPool/ObjectPool';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BoardComponent')\nexport class BoardComponent extends Component implements IObserver {\n    @property(Prefab)\n    tilePrefab: Prefab = null!;\n    @property(Node)\n    content: Node = null!;\n\n    private _board: IBoardDataAndAddNotifier;\n    private _tiles: Map<number, TileComponent> = new Map<number, TileComponent>();\n    private _contentTransform: UITransform;\n    private _tileWidth: number;\n    private _tileHeight: number;\n    private _pool: ObjectPool<TileComponent>;\n\n    onLoad() {\n        if (!this.tilePrefab) {\n            throw new Error('Prefab is null');\n        }\n\n        this._contentTransform = this.content.getComponent(UITransform);\n        const binder = Binder.getInstance();\n        this._board = binder.resolve<IBoardDataAndAddNotifier>(\"IBoardDataAndAddNotifier\");\n\n        this._pool = new ObjectPool(this.tilePrefab, this.content, this._board.xMax * this._board.yMax, \"TileComponent\");\n\n        this.adjustSize();\n\n        this._board.addObserver(this);\n    }\n\n    adjustSize() {\n        const squareTileSize = math.bits.min(this._contentTransform.contentSize.width / this._board.xMax, this._contentTransform.contentSize.height / this._board.yMax);\n        this._contentTransform.contentSize = new math.Size(squareTileSize * this._board.xMax + 0.1, squareTileSize * this._board.yMax);\n\n        this._tileWidth = squareTileSize;\n        this._tileHeight = squareTileSize;\n        this.getComponents(Layout).forEach(layout => {\n            layout.updateLayout();\n        });\n    }\n\n    notified(): void {\n        console.log(\"BoardComponent notified\");\n\n        this.updateTiles();\n    }\n\n    private updateTiles() {\n        const lastChanges = this._board.lastChangedTiles;\n\n        switch (lastChanges.change) {\n            case TilesChange.Removed:\n                console.log(\"BoardComponent updateTiles: Removed\");\n                lastChanges.tiles.forEach(tileModel => {\n                    const tileNode = this._tiles.get(tileModel.id);\n                    tileNode.pool(this._pool);\n                    this._tiles.delete(tileModel.id);\n                });\n                break;\n            case TilesChange.Added:\n                console.log(\"BoardComponent updateTiles: Added\");\n                lastChanges.tiles.forEach(tileModel => {\n                    this.setTileComponent(tileModel, this._pool.borrow());\n                });\n                break;\n            case TilesChange.Moved:\n                console.log(\"BoardComponent updateTiles: Moved\");\n                lastChanges.tiles.forEach(tileModel => {\n                    const tileNode = this._tiles.get(tileModel.id);\n                    const position = this.transformGridToUiPosition(tileModel.x, tileModel.y);\n                    tileNode.moveTo(position.x, this.getUiYPosition(position.y));\n                });\n                break;\n        }\n    }\n\n    private setTileComponent(tileModel: IReadTile, tileNode: TileComponent): void {\n        this._tiles.set(tileModel.id, tileNode);\n        tileNode.node.parent = this.content;\n        tileNode.init(tileModel)\n\n        this.setTileSize(tileNode);\n\n        const position = this.transformGridToUiPosition(tileModel.x, tileModel.y);\n        console.log(\"BoardComponent setTileComponent: \" + position.x + \", \" + position.y);\n        tileNode.node.setPosition(position.x, position.y);\n        tileNode.moveTo(position.x, this.getUiYPosition(position.y));\n    }\n\n    private transformGridToUiPosition(x: number, y: number): { x: number, y: number } {\n        let xPosition = x * this._tileWidth + this._tileWidth / 2;\n        let yPosition = y * this._tileHeight + this._tileHeight / 2;\n        console.log(\"BoardComponent transformGridToUiPosition: \" + xPosition + \", \" + yPosition);\n        return { x: xPosition, y: yPosition };\n    }\n\n    private setTileSize(tile: TileComponent): void {\n        console.log(\"BoardComponent setTileSize: \" + this._tileWidth + \", \" + this._tileHeight);\n        let tileTransform = tile.getComponent(UITransform);\n        tileTransform.height = this._tileHeight;\n        tileTransform.width = this._tileWidth;\n    }\n\n    private getUiYPosition(y: number): number {\n        return y - this._board.yMax * this._tileHeight;\n    }\n\n}\n\n","import { ICanShuffleAndIncrease } from \"./ICanShuffleAndIncrease\";\nimport { ICheckLost } from \"./ICheckLost\";\nimport { ICheckWin } from \"./ICheckWin\";\nimport { IObserver } from \"./IObserver\";\nimport { IReadStatsAndAddObserver } from \"./IReadStatsAndAddObserver\";\n\nexport class BoardStats implements ICheckWin, ICheckLost, ICanShuffleAndIncrease, IReadStatsAndAddObserver {\n    private readonly _maxTurns: number;\n    private _currentTurns: number;\n\n    private readonly _targetScore: number;\n    private _currentScore: number;\n\n    private readonly _maxShuffleCount: number;\n    private _currentShuffleCount: number;\n    private _observers: IObserver[];\n\n    constructor(maxTurns: number, targetScore: number, maxShuffleCount: number) {\n        this._maxTurns = maxTurns;\n        this._targetScore = targetScore;\n        this._maxShuffleCount = maxShuffleCount;\n        this._currentTurns = 0;\n        this._currentScore = 0;\n        this._currentShuffleCount = 0;\n        this._observers = [];\n    }\n\n    get maxTurns(): number { return this._maxTurns; }\n    get currentTurns(): number { return this._currentTurns; }\n    get targetScore(): number { return this._targetScore; }\n    get currentScore(): number { return this._currentScore; }\n    get maxShuffleCount(): number { return this._maxShuffleCount; }\n    get currentShuffleCount(): number { return this._currentShuffleCount; }\n\n    addObserver(observer: IObserver): void {\n        this._observers.push(observer);\n        observer.notified();\n    }\n\n    get canShuffle(): boolean {\n        return this._currentShuffleCount < this._maxShuffleCount;\n    }\n\n    increaseTurn(): void {\n        console.log(\"BoardStats increaseTurn\");\n        this._currentTurns++;\n        this.notifyObservers();\n    }\n\n    increaseScore(removedTiles: number): void {\n        console.log(\"BoardStats increaseScore\");\n        this._currentScore += removedTiles * 2;\n        this.notifyObservers();\n    }\n\n    increaseShuffle(): void {\n        console.log(\"BoardStats increaseShuffle\");\n        this._currentShuffleCount++;\n        this.notifyObservers();\n    }\n\n    get ifWin(): boolean {\n        return this._currentScore >= this._targetScore\n            && this._currentTurns < this._maxTurns;\n    }\n\n    get ifLost(): boolean {\n        return this._currentTurns >= this._maxTurns\n            && this._currentScore < this._targetScore;\n    }\n\n    private notifyObservers(): void {\n        this._observers.map(observer => observer.notified());\n    }\n}","import { _decorator, CCInteger, CCString, Component, Label, Node } from 'cc';\nimport { IAction } from '../../Game/Action/IAction';\nimport { ActionBomb as ActionBomb } from '../../Game/Action/ActionBomb';\nimport { BonusComponent } from './BonusComponent';\nimport { Binder } from '../../Game/Binder';\nimport { IObserver } from '../../Game/Board/IObserver';\nimport { ISetAddActionObserverGetCount } from '../../Game/Action/ISetAddActionObserverGetCount';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BombBoosterComponent')\nexport class BombBoosterComponent extends Component implements IObserver {\n    @property(CCString)\n    boosterName: string = '';\n    @property(CCInteger)\n    amount: number = 2;\n    @property(CCInteger)\n    radius: number = 2;\n    @property(BonusComponent)\n    bonusComponent: BonusComponent = null!;\n\n    private _action: IAction;\n    private _actionProvider: ISetAddActionObserverGetCount;\n\n    onLoad() {\n        if (!this.bonusComponent) {\n            throw new Error('bonusComponent is null');\n        }\n        this.bonusComponent.setBoosterName(this.boosterName);\n        this.bonusComponent.setCount(this.amount);\n\n        const binder = Binder.getInstance();\n        this._actionProvider = binder.resolve<ISetAddActionObserverGetCount>(\"ISetAddActionObserverGetCount\");\n        this._action = new ActionBomb(this.radius);\n\n        this._actionProvider.addAction(this._action, this.amount);\n        this._actionProvider.addObserver(this);\n    }\n\n    setBooster() {\n        this._actionProvider.setAction(this._action);\n    }\n\n    notified(): void {\n        this.bonusComponent.setCount(this._actionProvider.getCount(this._action));\n    }\n}\n\n","import { _decorator, Button, Component, Label } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BonusComponent')\nexport class BonusComponent extends Component {\n    @property(Button)\n    button: Button = null!;\n    @property(Label)\n    nameText: Label = null!;\n    @property(Label)\n    countText: Label = null!;\n\n    onLoad() {\n        if (!this.nameText) {\n            throw new Error('nameText is null');\n        }\n        if (!this.countText) {\n            throw new Error('countText is null');\n        }\n\n    }\n\n    setBoosterName(name: string) {\n        this.nameText.string = name;\n    }\n\n    setCount(count: number) {\n        this.countText.string = count.toString();\n        this.button.interactable = count > 0;\n    }\n}\n\n","import { Color } from 'cc';\nimport { IColorPalette } from './IColorPalette';\n\nexport class ColorPalette implements IColorPalette {\n    private readonly _colors: Color[];\n\n    constructor(colors: Color[] = [Color.WHITE]) {\n        this._colors = colors;\n    }\n\n    getRandomColor(): Color {\n        return this._colors[Math.floor(Math.random() * this._colors.length)];\n    }\n}","import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('internal.DebugViewRuntimeControl')\nexport class DebugViewRuntimeControl extends Component {\n    @property(Node)\n    compositeModeToggle: Node | null = null;\n    @property(Node)\n    singleModeToggle: Node | null = null;\n    @property(Node)\n    EnableAllCompositeModeButton: Node | null = null;\n\t_single: number = 0;\n\n    private strSingle: string[] = [\n        'No Single Debug',\n        'Vertex Color',\n        'Vertex Normal',\n        'Vertex Tangent',\n        'World Position',\n        'Vertex Mirror',\n        'Face Side',\n        'UV0',\n        'UV1',\n        'UV Lightmap',\n        'Project Depth',\n        'Linear Depth',\n\n        'Fragment Normal',\n        'Fragment Tangent',\n        'Fragment Binormal',\n        'Base Color',\n        'Diffuse Color',\n        'Specular Color',\n        'Transparency',\n        'Metallic',\n        'Roughness',\n        'Specular Intensity',\n        'IOR',\n\n        'Direct Diffuse',\n        'Direct Specular',\n        'Direct All',\n        'Env Diffuse',\n        'Env Specular',\n        'Env All',\n        'Emissive',\n        'Light Map',\n        'Shadow',\n        'AO',\n\n        'Fresnel',\n        'Direct Transmit Diffuse',\n        'Direct Transmit Specular',\n        'Env Transmit Diffuse',\n        'Env Transmit Specular',\n        'Transmit All',\n        'Direct Internal Specular',\n        'Env Internal Specular',\n        'Internal All',\n\n        'Fog',\n    ];\n    private strComposite: string[] = [\n        'Direct Diffuse',\n        'Direct Specular',\n        'Env Diffuse',\n        'Env Specular',\n        'Emissive',\n        'Light Map',\n        'Shadow',\n        'AO',\n\n        'Normal Map',\n        'Fog',\n\n        'Tone Mapping',\n        'Gamma Correction',\n\n        'Fresnel',\n        'Transmit Diffuse',\n        'Transmit Specular',\n        'Internal Specular',\n        'TT',\n    ];\n    private strMisc: string[] = [\n        'CSM Layer Coloration',\n        'Lighting With Albedo',\n    ];\n\n    private compositeModeToggleList: Node[] = [];\n    private singleModeToggleList: Node[] = [];\n    private miscModeToggleList: Node[] = [];\n    private textComponentList: RichText[] = [];\n    private labelComponentList: Label[] = [];\n    private textContentList: string[] = [];\n    private hideButtonLabel: Label;\n    start() {\n        // get canvas resolution\n        const canvas = this.node.parent.getComponent(Canvas);\n        if (!canvas) {\n            console.error('debug-view-runtime-control should be child of Canvas');\n            return;\n        }\n\n        const uiTransform = this.node.parent.getComponent(UITransform);\n        const halfScreenWidth = uiTransform.width * 0.5;\n        const halfScreenHeight = uiTransform.height * 0.5;\n\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\n        const width = 200, height = 20;\n\n        // new nodes\n        const miscNode = this.node.getChildByName('MiscMode');\n        const buttonNode = instantiate(miscNode);\n        buttonNode.parent = this.node;\n        buttonNode.name = 'Buttons';\n        const titleNode = instantiate(miscNode);\n        titleNode.parent = this.node;\n        titleNode.name = 'Titles';\n\n        // title\n        for (let i = 0; i < 2; i++) {\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\n            newLabel.setScale(0.75, 0.75, 0.75);\n            newLabel.parent = titleNode;\n            const labelComponent = newLabel.getComponent(Label);\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\n            labelComponent.color = Color.WHITE;\n            labelComponent.overflow = 0;\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\n        }\n\n        y -= height;\n        // single\n        let currentRow = 0;\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\n            if (i === this.strSingle.length >> 1) {\n                x += width;\n                currentRow = 0;\n            }\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\n            newNode.setPosition(x, y - height * currentRow, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = this.singleModeToggle.parent;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strSingle[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\n\n            this.singleModeToggleList[i] = newNode;\n        }\n\n        x += width;\n        // buttons\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\n        this.EnableAllCompositeModeButton.parent = buttonNode;\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\n        changeColorButton.setPosition(x + 90, y, 0.0);\n        changeColorButton.setScale(0.5, 0.5, 0.5);\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\n        changeColorButton.parent = buttonNode;\n        labelComponent = changeColorButton.getComponentInChildren(Label);\n        labelComponent.string = 'TextColor';\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\n        HideButton.setPosition(x + 200, y, 0.0);\n        HideButton.setScale(0.5, 0.5, 0.5);\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\n        HideButton.parent = this.node.parent;\n        labelComponent = HideButton.getComponentInChildren(Label);\n        labelComponent.string = 'Hide UI';\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n        this.hideButtonLabel = labelComponent;\n\n        // misc\n        y -= 40;\n        for (let i = 0; i < this.strMisc.length; i++) {\n            const newNode = instantiate(this.compositeModeToggle);\n            newNode.setPosition(x, y - height * i, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = miscNode;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strMisc[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            const toggleComponent = newNode.getComponent(Toggle);\n            toggleComponent.isChecked = i ? true : false;\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\n            this.miscModeToggleList[i] = newNode;\n        }\n\n        // composite\n        y -= 150;\n        for (let i = 0; i < this.strComposite.length; i++) {\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\n            newNode.setPosition(x, y - height * i, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = this.compositeModeToggle.parent;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strComposite[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\n\n            this.compositeModeToggleList[i] = newNode;\n        }\n    }\n\n    isTextMatched(textUI, textDescription) : boolean {\n        let tempText = new String(textUI);\n        const findIndex = tempText.search('>');\n        if (findIndex === -1) {\n            return textUI === textDescription;\n        } else {\n            tempText = tempText.substr(findIndex + 1);\n            tempText = tempText.substr(0, tempText.search('<'));\n            return tempText === textDescription;\n        }\n    }\n    toggleSingleMode(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        const textComponent = toggle.getComponentInChildren(RichText);\n        for (let i = 0; i < this.strSingle.length; i++) {\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\n                debugView.singleMode = i;\n            }\n        }\n    }\n    toggleCompositeMode(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        const textComponent = toggle.getComponentInChildren(RichText);\n        for (let i = 0; i < this.strComposite.length; i++) {\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\n                debugView.enableCompositeMode(i, toggle.isChecked);\n            }\n        }\n    }\n    toggleLightingWithAlbedo(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        debugView.lightingWithAlbedo = toggle.isChecked;\n    }\n    toggleCSMColoration(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        debugView.csmLayerColoration = toggle.isChecked;\n    }\n    enableAllCompositeMode(button: Button) {\n        const debugView = director.root!.debugView;\n        debugView.enableAllCompositeMode(true);\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\n            toggleComponent.isChecked = true;\n        }\n\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\n        toggleComponent.isChecked = false;\n        debugView.csmLayerColoration = false;\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\n        toggleComponent.isChecked = true;\n        debugView.lightingWithAlbedo = true;\n    }\n    hideUI(button: Button) {\n        const titleNode = this.node.getChildByName('Titles');\n        const activeValue = !titleNode.active;\n        this.singleModeToggleList[0].parent.active = activeValue;\n        this.miscModeToggleList[0].parent.active = activeValue;\n        this.compositeModeToggleList[0].parent.active = activeValue;\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\n        titleNode.active = activeValue;\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\n    }\n\n    private _currentColorIndex = 0;\n    private strColor: string[] = [\n        '<color=#ffffff>',\n        '<color=#000000>',\n        '<color=#ff0000>',\n        '<color=#00ff00>',\n        '<color=#0000ff>',\n    ];\n    private color: Color[] = [\n        Color.WHITE,\n        Color.BLACK,\n        Color.RED,\n        Color.GREEN,\n        Color.BLUE,\n    ];\n    changeTextColor(button: Button) {\n        this._currentColorIndex++;\n        if (this._currentColorIndex >= this.strColor.length) {\n            this._currentColorIndex = 0;\n        }\n        for (let i = 0; i < this.textComponentList.length; i++) {\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\n        }\n        for (let i = 0; i < this.labelComponentList.length; i++) {\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\n        }\n    }\n\n    onLoad() {\n    }\n    update(deltaTime: number) {\n    }\n}\n","import { IFillBoard } from \"../Board/IFillBoard\";\nimport { IStage } from \"./IStage\";\n\nexport class FillingStage implements IStage {\n    private readonly _boardFill: IFillBoard;\n    private _isStarted: boolean = false;\n    private _isDone: boolean = false;\n\n    constructor(boardFill: IFillBoard) {\n        this._boardFill = boardFill;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"FillingStage execute\");\n        this._isStarted = true;\n        this._boardFill.fill();\n        this._isDone = true;\n    }\n}","import { IGameSettings } from \"../../IGameSettings\";\nimport { ActionPerformer } from \"../Action/ActionPerformer\";\nimport { Binder } from \"../Binder\";\nimport { Board } from \"../Board/Board\";\nimport { BoardStats } from \"../Board/BoardStats\";\nimport { ColorPalette } from \"../Color/ColorPalette\";\nimport { IGameController } from \"./IGameController\";\nimport { GameState } from \"./ISetState\";\nimport { SceneSwitcher } from \"../Scene/SceneSwitcher\";\nimport { AllowActionStage } from \"../Stage/AllowActionStage\";\nimport { FillingStage } from \"../Stage/FillingStage\";\nimport { IfLostStage } from \"../Stage/IfLostStage\";\nimport { IfWinStage } from \"../Stage/IfWinStage\";\nimport { ShiftDownAndFillStage } from \"../Stage/ShiftDownAndFillStage\";\nimport { ShuffleIfCantContinueStage } from \"../Stage/ShuffleIfCantContinueStage\";\nimport { StageController } from \"../Stage/StageController\";\nimport { WaitForActionStage } from \"../Stage/WaitForActionStage\";\nimport { WaitForTimeStage } from \"../Stage/WaitForTimeStage\";\n\nexport class GameController implements IGameController {\n    private _state: GameState;\n    private _settings: IGameSettings;\n    private _colorPalette: ColorPalette;\n    private _board: Board;\n    private _boardStats: BoardStats;\n    private _actionPerformer: ActionPerformer;\n    private _sceneSwitcher: SceneSwitcher;\n    private _stageController: StageController;\n\n    constructor(settings: IGameSettings) {\n        this._settings = settings;\n        this._state = GameState.None;\n    }\n\n    setStateTo(state: GameState): void {\n        switch (state) {\n            case GameState.Start:\n                if (this._state === GameState.None\n                    || this._state === GameState.GameOver) {\n                    console.log(\"Game Init\");\n                    this._state = state;\n                    this.init();\n                    this.setStateTo(GameState.Playing);\n                }\n                break;\n            case GameState.Playing:\n                if (this._state === GameState.Start) {\n                    this._state = state;\n                    console.log(\"Game Start\");\n\n                    this._sceneSwitcher.switchScene(this._settings.gameScreenName, () => {\n                        console.log(\"GameScreen loaded\");\n                        this._stageController.startSequance();\n                    });\n                }\n                break;\n            case GameState.Paused:\n                break;\n            case GameState.GameOver:\n                if (this._state === GameState.Playing) {\n                    this._state = state;\n                    console.log(\"Game Over\");\n\n                    this._sceneSwitcher.switchScene(this._settings.gameOverScreenName, () => {\n                        console.log(\"GameOverScreen loaded\");\n                    });\n                }\n                break;\n        }\n    }\n\n    update(): void {\n        if (this._state === GameState.Playing && this._stageController.isStarted) {\n            this._stageController.update();\n        }\n    }\n\n    private init(): void {\n        this.clear();\n\n        this._colorPalette = new ColorPalette(this._settings.tileColors);\n        this._board = new Board(this._settings.boardMaxX, this._settings.boardMaxY, this._colorPalette)\n        this._boardStats = new BoardStats(this._settings.maxTurns, this._settings.targetScore, this._settings.maxShuffleCount);\n        this._actionPerformer = new ActionPerformer(this._board, this._boardStats, this._settings.groupSizeForDefaultAction);\n\n        this._sceneSwitcher = new SceneSwitcher(this._settings.loadingScreenName);\n        this._stageController = new StageController();\n        this._stageController.onEndGameSequence = () => { this.setStateTo(GameState.GameOver); }\n\n        this.addStages();\n        this.makeBindings();\n    }\n\n    private clear(): void {\n        // On second reloading of the game, ewrything is already inited\n        // and 'new ()' doesn't work. It seems that typescript works this way.\n        // So we need to clear it first\n        this._colorPalette = null;\n        this._colorPalette = null;\n        this._board = null;\n        this._boardStats = null;\n        this._actionPerformer = null;\n        this._sceneSwitcher = null;\n        this._stageController = null;\n        Binder.getInstance().clear();\n    }\n\n    private makeBindings(): void {\n        Binder.getInstance().addBinding(\"IReadStatsAndAddObserver\", this._boardStats);\n\n        Binder.getInstance().addBinding(\"IBoardDataAndAddNotifier\", this._board);\n\n        Binder.getInstance().addBinding(\"ISetAndPerformeAction\", this._actionPerformer);\n        Binder.getInstance().addBinding(\"ISetAction\", this._actionPerformer);\n        Binder.getInstance().addBinding(\"ISetAddActionObserverGetCount\", this._actionPerformer);\n\n        Binder.getInstance().addBinding(\"ISetState\", this);\n    }\n\n\n    private addStages(): void {\n        let startStages = [\n            new WaitForTimeStage(1),\n            new AllowActionStage(false, this._actionPerformer),\n            new FillingStage(this._board),\n            new WaitForTimeStage(1),\n        ];\n        let repeatingStages = [\n            new IfWinStage(this._boardStats, this._stageController),\n            new IfLostStage(this._boardStats, this._stageController),\n            new ShuffleIfCantContinueStage(1, this._actionPerformer, this._board, this._boardStats, this._stageController),\n            new AllowActionStage(true, this._actionPerformer),\n            new WaitForActionStage(this._actionPerformer, this._actionPerformer),\n            new AllowActionStage(false, this._actionPerformer),\n            new ShiftDownAndFillStage(this._board, this._board),\n            new WaitForTimeStage(1),\n        ];\n\n        this._stageController.addStartStages(startStages);\n        this._stageController.addRepeatingStages(repeatingStages);\n    }\n}\n","import { _decorator, CCInteger, CCString, Color, Component } from 'cc';\nimport { IGameSettings } from './IGameSettings';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameSettings')\nexport class GameSettings extends Component implements IGameSettings {\n    @property(CCString)\n    readonly loadingScreenName: string;\n    @property(CCString)\n    readonly gameScreenName: string;\n    @property(CCString)\n    readonly gameOverScreenName: string;\n    @property(CCInteger)\n    readonly boardMaxX: number = 5;\n    @property(CCInteger)\n    readonly boardMaxY: number = 5;\n    @property([Color])\n    readonly tileColors: Color[] = [];\n    @property(CCInteger)\n    readonly groupSizeForDefaultAction: number = 2;\n    @property(CCInteger)\n    readonly maxShuffleCount: number = 2;\n    @property(CCInteger)\n    readonly maxTurns: number = 10;\n    @property(CCInteger)\n    readonly targetScore: number = 100;\n}\n\n","import { IReadTile } from \"./IReadTile\";\n\nexport interface IBoardLastChanged {\n    readonly lastChangedTiles: { change: TilesChange, tiles: IReadTile[] };\n}\n\nexport enum TilesChange {\n    Added,\n    Removed,\n    Moved\n}","// import { Color } from 'cc';\n\nimport { Color } from \"cc\";\n\nexport interface IColorPalette {\n    getRandomColor(): Color;\n    // get countColors(): number;\n\n    // getColor(index: number): Color;\n}","import { ICheckLost } from \"../Board/ICheckLost\";\nimport { IEndGameSequence } from \"./IEndGameSequence\";\nimport { IStage } from \"./IStage\";\n\nexport class IfLostStage implements IStage {\n    private _endGameChecker: ICheckLost;\n    private _endGameSequence: IEndGameSequence;\n\n    constructor(endGameChecker: ICheckLost, endGameSequence: IEndGameSequence) {\n        this._endGameChecker = endGameChecker;\n        this._endGameSequence = endGameSequence;\n    }\n\n    isStarted: boolean;\n    isDone: boolean;\n\n    reset(): void {\n        this.isStarted = false;\n        this.isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"IfLostStage execute\");\n        this.isStarted = true;\n        if (this._endGameChecker.ifLost) {\n            this._endGameSequence.endSequance();\n        }\n        this.isDone = true;\n    }\n}","import { ICheckWin } from \"../Board/ICheckWin\";\nimport { IEndGameSequence } from \"./IEndGameSequence\";\nimport { IStage } from \"./IStage\";\n\nexport class IfWinStage implements IStage {\n    private _winChecker: ICheckWin;\n    private _endGameSequence: IEndGameSequence;\n\n    constructor(winChecker: ICheckWin, endGameSequence: IEndGameSequence) {\n        this._winChecker = winChecker;\n        this._endGameSequence = endGameSequence;\n    }\n\n    isStarted: boolean;\n    isDone: boolean;\n\n    reset(): void {\n        this.isStarted = false;\n        this.isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"IfWinStage execute\");\n        this.isStarted = true;\n        if (this._winChecker.ifWin) {\n            this._endGameSequence.endSequance();\n        }\n        this.isDone = true;\n    }\n}","export interface ISetState {\n    setStateTo(state: GameState): void;\n}\n\nexport enum GameState {\n    None,\n    Start,\n    Playing,\n    Paused,\n    GameOver\n}\n","import { _decorator, Component, director } from 'cc';\nimport { GameController } from './Game/GameController/GameController';\nimport { GameSettings } from './GameSettings';\nimport { IGameController } from './Game/GameController/IGameController';\nimport { GameState } from './Game/GameController/ISetState';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Main')\nexport class Main extends Component {\n    @property(GameSettings)\n    gameSettings: GameSettings;\n\n    private _gameController: IGameController;\n\n    onLoad() {\n        console.log(\"Main onLoad\");\n        director.addPersistRootNode(this.node);\n\n        this._gameController = new GameController(this.gameSettings);\n    }\n\n    start() {\n        console.log(\"Main start\");\n        this._gameController.setStateTo(GameState.Start);\n    }\n\n    update() {\n        this._gameController.update();\n    }\n}","import { Component, Node, Prefab } from \"cc\";\nimport { PooledObject } from \"./PooledObject\";\nimport { IReturn } from \"./IReturn\";\n\nexport class ObjectPool<T extends Component> implements IReturn<T> {\n    private prefab: Prefab;\n    private parent: Node;\n    private pooledObjects: PooledObject<T>[] = [];\n    private componentName: string;\n\n    constructor(prefab: Prefab, parent: Node, defaultPoolCount: number, componentName: string) {\n        this.prefab = prefab;\n        this.parent = parent;\n        this.componentName = componentName;\n\n        for (let i = 0; i < defaultPoolCount; i++) {\n            this.createNew();\n        }\n    }\n\n    borrow(): T {\n        const objectToBorrow: PooledObject<T> | null = this.pooledObjects.find((o) => !o.IsBorrowed);\n        if (objectToBorrow != null) {\n            return objectToBorrow.borrow();\n        }\n\n        return this.createNew().borrow();\n    }\n\n    return(object: T): void {\n        const objectToReturn: PooledObject<T> | null = this.pooledObjects.find((o) => o.Equals(object));\n        if (objectToReturn == null) {\n            throw new Error(\"Object \" + this.prefab.name + \" is not a member of the pool\");\n        }\n\n        objectToReturn.return();\n    }\n\n    private createNew(): PooledObject<T> {\n        const newPooledObject: PooledObject<T> = new PooledObject(this.prefab, this.parent, this.componentName);\n        this.pooledObjects.push(newPooledObject);\n\n        return newPooledObject;\n    }\n}","\nimport { _decorator, Component } from 'cc';\nimport { Binder } from '../Game/Binder';\nimport { GameState, ISetState } from '../Game/GameController/ISetState';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PlayButtonComponent')\nexport class PlayButtonComponent extends Component {\n    private _setState: ISetState;\n\n    onLoad() {\n        const binder = Binder.getInstance();\n        this._setState = binder.resolve<ISetState>(\"ISetState\");\n\n    }\n\n    setGameStateToPlay() {\n        this._setState.setStateTo(GameState.Start);\n    }\n}\n\n","import { Component, instantiate, Node, Prefab } from \"cc\";\n\nexport class PooledObject<T extends Component> {\n    private isBorrowed = false;\n    private defaultParent: Node;\n    private instancedNode: Node;\n    private instancedComponent: T;\n\n    constructor(prefab: Prefab, defaultParent: Node, componentName: string) {\n        this.defaultParent = defaultParent;\n\n        this.instancedNode = instantiate(prefab);\n        this.instancedComponent = <T>this.instancedNode.getComponent(componentName);\n        if (this.instancedComponent == null) {\n            console.error(\"Object \" + prefab.name + \" does not have component \" + componentName);\n        }\n\n        this.clear();\n    }\n\n    get IsBorrowed(): boolean {\n        return this.isBorrowed;\n    }\n\n    Equals(component: T): boolean {\n        return this.instancedComponent == component;\n    }\n\n    borrow(): T {\n        this.isBorrowed = true;\n        return this.instancedComponent;\n    }\n\n    return(): void {\n        this.clear();\n    }\n\n    private clear(): void {\n        this.instancedNode.active = false;\n        this.instancedNode.parent = this.defaultParent;\n        this.isBorrowed = false;\n    }\n}","import { _decorator, Component, Node, ProgressBar } from 'cc';\nimport { IReadStatsAndAddObserver } from '../Game/Board/IReadStatsAndAddObserver';\nimport { IObserver } from '../Game/Board/IObserver';\nimport { Binder } from '../Game/Binder';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ProgressComponent')\nexport class ProgressComponent extends Component implements IObserver {\n    @property(ProgressBar)\n    progress: ProgressBar = null!;\n\n    private _stats: IReadStatsAndAddObserver;\n\n    onLoad() {\n        if (!this.progress) {\n            throw new Error('progress is null');\n        }\n\n        const binder = Binder.getInstance();\n        this._stats = binder.resolve<IReadStatsAndAddObserver>(\"IReadStatsAndAddObserver\");\n        this._stats.addObserver(this);\n    }\n\n    notified(): void {\n        this.progress.progress = this._stats.currentScore / this._stats.targetScore;\n    }\n}\n\n","import { _decorator, CCString, Component, director, Node } from 'cc';\n\nexport class SceneSwitcher implements ISceneSwitcher {\n    private readonly _loadingScreenName: string;\n\n    constructor(loadingScreenName: string) {\n        this._loadingScreenName = loadingScreenName;\n    }\n\n    switchScene(sceneName: string, callback: () => void = () => { }): void {\n        this.loadLoadingScreen(() => {\n            director.loadScene(sceneName, (err, scene) => {\n                if (err) {\n                    console.error(err);\n                    return;\n                }\n                callback?.();\n            });\n        });\n    }\n\n    private loadLoadingScreen(callback: () => void = () => { }): void {\n        director.loadScene(this._loadingScreenName, (err, scene) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n            callback?.();\n        });\n    }\n}","import { _decorator, Component, Label } from 'cc';\nimport { Binder } from '../Game/Binder';\nimport { IReadStatsAndAddObserver } from '../Game/Board/IReadStatsAndAddObserver';\nimport { IObserver } from '../Game/Board/IObserver';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScoreComponent')\nexport class ScoreComponent extends Component implements IObserver {\n    @property(Label)\n    score: Label = null!;\n\n    private _stats: IReadStatsAndAddObserver;\n\n    onLoad() {\n        if (!this.score) {\n            throw new Error('score is null');\n        }\n\n        const binder = Binder.getInstance();\n        this._stats = binder.resolve<IReadStatsAndAddObserver>(\"IReadStatsAndAddObserver\");\n        this._stats.addObserver(this);\n    }\n\n    notified(): void {\n        this.score.string = this._stats.currentScore.toString();\n    }\n}\n\n","\nimport { IFillBoard } from \"../Board/IFillBoard\";\nimport { IShiftDownBoard } from \"../Board/IShiftDownBoard\";\nimport { IStage } from \"./IStage\";\n\nexport class ShiftDownAndFillStage implements IStage {\n    private readonly _boardFill: IFillBoard;\n    private _isStarted: boolean = false;\n    private _isDone: boolean = false;\n    private _boardShiftDown: IShiftDownBoard;\n\n    constructor(boardShiftDown: IShiftDownBoard, boardFill: IFillBoard) {\n        this._boardShiftDown = boardShiftDown;\n        this._boardFill = boardFill;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"ShiftDownAndFillStage execute\");\n        this._isStarted = true;\n        this._boardShiftDown.shiftDown();\n        this._boardFill.fill();\n        this._isDone = true;\n    }\n}","\nimport { _decorator, Component, Label } from 'cc';\nimport { Binder } from '../Game/Binder';\nimport { IReadStatsAndAddObserver } from '../Game/Board/IReadStatsAndAddObserver';\nimport { IObserver } from '../Game/Board/IObserver';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ShuffleComponent')\nexport class ShuffleComponent extends Component implements IObserver {\n    @property(Label)\n    shuffles: Label = null!;\n\n    private _stats: IReadStatsAndAddObserver;\n\n    onLoad() {\n        if (!this.shuffles) {\n            throw new Error('shuffles is null');\n        }\n\n        const binder = Binder.getInstance();\n        this._stats = binder.resolve<IReadStatsAndAddObserver>(\"IReadStatsAndAddObserver\");\n        this._stats.addObserver(this);\n    }\n\n    notified(): void {\n        this.shuffles.string = (this._stats.maxShuffleCount - this._stats.currentShuffleCount).toString();\n    }\n}\n\n","import { ICanDoDefaultAction } from \"../Board/ICanDoDefaultAction\";\nimport { ICanShuffleAndIncrease } from \"../Board/ICanShuffleAndIncrease\";\nimport { IShuffle } from \"../Board/IShuffle\";\nimport { IEndGameSequence } from \"./IEndGameSequence\";\nimport { IStage } from \"./IStage\";\n\nexport class ShuffleIfCantContinueStage implements IStage {\n    private readonly _canContinue: ICanDoDefaultAction;\n    private readonly _shuffle: IShuffle;\n    private readonly _canShuffleAndIncrease: ICanShuffleAndIncrease;\n    private readonly _endGameSequence: IEndGameSequence;\n    private readonly _time: number;\n    private _isStarted: boolean = false;\n    private _isDone: boolean = false;\n\n\n    constructor(time: number, canContinue: ICanDoDefaultAction, shuffle: IShuffle, canShuffleAndIncrease: ICanShuffleAndIncrease,\n        endGameSequence: IEndGameSequence) {\n        this._time = time;\n        this._canContinue = canContinue;\n        this._shuffle = shuffle;\n        this._canShuffleAndIncrease = canShuffleAndIncrease;\n        this._endGameSequence = endGameSequence;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"ShuffleIfCantContinueStage execute\");\n        this._isStarted = true;\n        if (!this._canContinue.canDoDefaultAction) {\n            if (this._canShuffleAndIncrease.canShuffle) {\n                this._shuffle.shuffle();\n                this._canShuffleAndIncrease.increaseShuffle();\n                setTimeout(() => {\n                    this.execute();\n                }, this._time * 1000);\n            }\n            else {\n                this._endGameSequence.endSequance();\n                this._isDone = true;\n            }\n        }\n        else {\n            this._isDone = true;\n        }\n    }\n}","import { IEndGameSequence } from \"./IEndGameSequence\";\nimport { IOnEndGameSequence } from \"./IOnEndGameSequence\";\nimport { IStage } from \"./IStage\";\nimport { IStageController } from \"./IStageController\";\nimport { IStartGameSequenceAndUpdate } from \"./IStartGameSequenceAndUpdate\";\n\nexport class StageController implements IStageController, IEndGameSequence, IStartGameSequenceAndUpdate, IOnEndGameSequence {\n    private _currentStageIndex: number;\n    private _repeatingStages: IStage[] = [];\n    private _startStages: IStage[] = [];\n    private _endStages: IStage[] = [];\n\n    private _stageType: StageType;\n    private _sequenceEnded: boolean;\n\n    constructor() {\n        this._stageType = StageType.None;\n        this._sequenceEnded = false;\n        this._currentStageIndex = 0;\n    }\n\n    public onEndGameSequence: () => void;\n\n    get isStarted(): boolean {\n        return this._stageType != StageType.None;\n    }\n\n    update(): void {\n        if (this._sequenceEnded) {\n            return;\n        }\n\n        let currentStages = this.getStages(this._stageType);\n        if (this._currentStageIndex < currentStages.length) {\n            let currentStage = currentStages[this._currentStageIndex];\n\n            if (currentStage.isDone) {\n                this.increaseStageCounter();\n                currentStage.reset();\n            }\n            else if (currentStage.isStarted) {\n                return;\n            }\n            else {\n                console.log(\"StageController update execute\");\n                currentStage.execute();\n            }\n        }\n        else {\n            this.switchToNextStage();\n        }\n    }\n\n    private switchToNextStage(): void {\n        this._currentStageIndex = 0;\n        switch (this._stageType) {\n            case StageType.Start:\n                this._stageType = StageType.Repeating;\n                break;\n            case StageType.End:\n                this._sequenceEnded = true;\n                this.onEndGameSequence();\n                break;\n        }\n    }\n\n    private getStages(stageType: StageType): IStage[] {\n        switch (stageType) {\n            case StageType.Start:\n                return this._startStages;\n            case StageType.Repeating:\n                return this._repeatingStages;\n            case StageType.End:\n                return this._endStages;\n        }\n    }\n\n    addStartStages(stages: IStage[]): void {\n        this._startStages = stages;\n    }\n\n    addRepeatingStages(stages: IStage[]): void {\n        this._repeatingStages = stages;\n    }\n\n    addEndStages(stages: IStage[]): void {\n        this._endStages = stages;\n    }\n\n    startSequance(): void {\n        console.log(\"Start Sequance\");\n        this._currentStageIndex = 0;\n        this._stageType = StageType.Start;\n    }\n\n    endSequance(): void {\n        console.log(\"End Sequance\");\n        this._currentStageIndex = 0;\n        this._stageType = StageType.End;\n    }\n\n    private increaseStageCounter(): void {\n        if (this._stageType == StageType.Repeating) {\n            this._currentStageIndex = (this._currentStageIndex + 1) % (this._repeatingStages.length);\n        }\n        else {\n            this._currentStageIndex++;\n        }\n    }\n}\n\nenum StageType {\n    None,\n    Start,\n    Repeating,\n    End\n}","import { Color } from \"cc\";\nimport { ITile } from \"./ITile\";\n\nexport class Tile implements ITile {\n    private static _idCounter: number = 0;\n\n    private readonly _id: number;\n    private _x: number;\n    private _y: number;\n    private readonly _color: Color;\n\n    constructor(x: number, y: number, color: Color, id: number = Tile._idCounter++) {\n        this._id = id;\n        this._x = x;\n        this._y = y;\n        this._color = color;\n    }\n\n    setPosition({ x, y }: { x: number, y: number }): void {\n        this._x = x;\n        this._y = y;\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    get color(): Color {\n        return this._color;\n    }\n}","import { _decorator, CCFloat, Component, instantiate, Node, Prefab, Sprite, tween, Vec3 } from 'cc';\nimport { IReadTile } from '../Game/Board/IReadTile';\nimport { Binder } from '../Game/Binder';\nimport { ISetAndPerformeAction } from '../Game/Action/ISetAndPerformeAction';\nimport { IReturn } from './ObjectPool/IReturn';\nconst { ccclass, property } = _decorator;\n\n@ccclass('TileComponent')\nexport class TileComponent extends Component {\n    @property(CCFloat)\n    moveDuration: number = 0.7;\n    @property(CCFloat)\n    destroyDuration: number = 0.2;\n\n    private _model: IReadTile;\n    private _sprite: Sprite;\n    private _performAction: ISetAndPerformeAction;\n\n    onLoad() {\n        const sprite = this.getComponent(Sprite);\n        if (sprite) {\n            this._sprite = sprite;\n        } else {\n            console.error('TileComponent init: Sprite component not found');\n        }\n\n        const binder = Binder.getInstance();\n        this._performAction = binder.resolve<ISetAndPerformeAction>(\"ISetAndPerformeAction\");\n    }\n\n    init(model: IReadTile) {\n        this._model = model;\n        this.node.active = true;\n        this._sprite.color = this._model.color;\n    }\n\n    pool(pool: IReturn<TileComponent>) {\n        tween(this.node)\n            .to(this.destroyDuration, { scale: new Vec3(0, 0, 0) })\n            .call(() => {\n                this.node.scale = new Vec3(1, 1, 1);\n                pool.return(this);\n            })\n            .start();\n    }\n\n    moveTo(x: number, y: number) {\n        tween(this.node)\n            .to(this.moveDuration, { position: new Vec3(x, y, 0) })\n            .start();\n    }\n\n    onTileClicked() {\n        console.log('TileComponent onTileClicked');\n        this._performAction.performActionOnCellAt(this._model.x, this._model.y);\n    }\n}","import { _decorator, Component, Label } from 'cc';\nimport { Binder } from '../Game/Binder';\nimport { IReadStatsAndAddObserver } from '../Game/Board/IReadStatsAndAddObserver';\nimport { IObserver } from '../Game/Board/IObserver';\nconst { ccclass, property } = _decorator;\n\n@ccclass('TurnsComponent')\nexport class TurnsComponent extends Component implements IObserver {\n    @property(Label)\n    turns: Label = null!;\n\n    private _stats: IReadStatsAndAddObserver;\n\n    onLoad() {\n        if (!this.turns) {\n            throw new Error('turns is null');\n        }\n\n        const binder = Binder.getInstance();\n        this._stats = binder.resolve<IReadStatsAndAddObserver>(\"IReadStatsAndAddObserver\");\n        this._stats.addObserver(this);\n    }\n\n    notified(): void {\n        this.turns.string = (this._stats.maxTurns - this._stats.currentTurns).toString();\n    }\n}\n\n","import { IAddObserver } from \"../Board/IAddObserver\";\nimport { IIsActionAllowed } from \"../Board/IIsActionAllowed\";\nimport { IObserver } from \"../Board/IObserver\";\nimport { IStage } from \"./IStage\";\n\nexport class WaitForActionStage implements IStage, IObserver {\n    private readonly _observerAdder: IAddObserver;\n    private readonly _actionAllower: IIsActionAllowed;\n\n    private _isStarted: boolean;\n    private _isDone: boolean;\n\n    constructor(observerAdder: IAddObserver, actionAllower: IIsActionAllowed) {\n        this._observerAdder = observerAdder;\n        this._actionAllower = actionAllower;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"WaitForActionStage execute\");\n        this._isStarted = true;\n        this._observerAdder.addObserver(this);\n    }\n\n    notified(): void {\n        if (this._actionAllower.isActionAllowed) {\n            this._isDone = true;\n        }\n    }\n}","import { IStage } from \"./IStage\";\n\nexport class WaitForTimeStage implements IStage {\n    private readonly _time: number;\n\n    private _isStarted: boolean;\n    private _isDone: boolean;\n\n    constructor(time: number) {\n        this._time = time;\n    }\n\n    get isStarted(): boolean {\n        return this._isStarted;\n    }\n\n    get isDone(): boolean {\n        return this._isDone;\n    }\n\n    reset(): void {\n        this._isStarted = false;\n        this._isDone = false;\n    }\n\n    execute(): void {\n        console.log(\"WaitForTimeStage execute\");\n        this._isStarted = true;\n        setTimeout(() => {\n            this._isDone = true;\n        }, this._time * 1000);\n    }\n}"]}